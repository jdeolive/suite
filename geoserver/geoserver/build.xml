<project name="geoserver" default="build">
  <import file="../../build/common.xml"/>

  <property name="gs.flags" value=""/>
  <property name="gs.dir" value="geoserver"/>
  <property name="gs-core.ext.dir" value="geoserver/src/target/release"/>
  <property name="gs-comm.ext.dir" value="geoserver/src/community/target/release"/>

  <target name="clean" unless="skip.gs" description="Clean GeoServer">
    <antcall target="clean-core"/>
  </target>
  <target name="clean-core" unless="skip.gs" description="Clean GeoServer Core Modules and Extensions">
    <delete dir="target"/>
    <!-- Can't run mvn clean here if we have a custom version -->
  </target>
  <target name="clean-community" unless="skip.gs" description="Clean GeoServer Community Extensions">
    <delete dir="community/target"/>
    <!-- Can't run mvn clean here if we have a custom version -->
  </target>

  <target name="build" unless="skip.gs" description="Build GeoServer">
    <antcall target="build-core"/>
  </target>
  <target name="build-core" unless="skip.gs" description="Build GeoServer Core Modules and Extensions">
    <exec executable="git" dir="${gs.dir}" failonerror="false" outputproperty="gs.rev">
      <arg line="rev-parse HEAD"/>
    </exec>
    <antcall target="mvn">
      <param name="dir" value="${gs.dir}/src"/>
      <param name="flags" value="-DskipTests -DconfigDirectory=${basedir}/${gs.dir}/data -Dbuild.commit.id=${gs.rev} -Prelease,${gs.profile},${gs.exts_core} ${gs.flags} -Dgwc.version=${gwc.version}"/>
      <param name="goals" value="clean install assembly:attached"/>
    </antcall>
  </target>
  <target name="build-community" unless="skip.gs" description="Build GeoServer Community Extensions">
    <exec executable="git" dir="${gs.dir}" failonerror="false" outputproperty="gs.rev">
      <arg line="rev-parse HEAD"/>
    </exec>
    <antcall target="mvn">
      <param name="dir" value="${gs.dir}/src/community"/>
      <param name="flags" value="-DskipTests -DconfigDirectory=${basedir}/${gs.dir}/data -Dbuild.commit.id=${gs.rev} -Pcommunity-release-module,communityRelease,${gs.exts_comm} ${gs.flags} -Dgwc.version=${gwc.version}"/>
      <param name="goals" value="clean install assembly:attached"/>
    </antcall>
  </target>

  <target name="assemble" unless="skip.gs" description="Stage GeoServer artifacts">
    <antcall target="assemble-core"/>
  </target>
  <target name="assemble-core" unless="skip.gs" description="Stage GeoServer Core artifacts">
    <!-- extract artifacts to target, excluding core jars -->
    <foreach list="${gs.exts_core}" param="ext" target="unpack-core-ext" />
    <!-- modify artifacts -->

    <!-- copy the ogr jars into the gdal ext directory -->
    <copy todir="target/gdal" flatten="true">
      <fileset dir="../geotools/geotools/modules/plugin/ogr">
        <include name="**/gt-ogr-core-*.jar"/>
        <include name="**/gt-ogr-jni-*.jar"/>
        <exclude name="**/*-sources.jar"/>
        <exclude name="**/*-tests.jar"/>
      </fileset>
    </copy>

    <!-- add back when netcdf-out C-lib is supported; combines both netcdf exts
    <move todir="target/netcdf" flatten="true">
      <fileset dir="target/netcdf-out">
        <include name="gs-netcdf-out*.jar"/>
      </fileset>
    </move>
    -->

    <!-- assemble final artifacts -->
    <foreach list="${gs.exts_core}" param="name" target="assemble-extension"/>
  </target>
  <target name="assemble-community" unless="skip.gs" description="Stage GeoServer Community artifacts">
    <!-- extract artifacts to target, excluding core jars -->
    <foreach list="${gs.exts_comm}" param="ext" target="unpack-comm-ext" />
    <!-- modify artifacts -->

    <!-- assemble final artifacts -->
    <foreach list="${gs.exts_comm}" param="name" target="assemble-extension"/>
  </target>

  <target name="publish" unless="skip.gs" >
    <antcall target="publish-core"/>
  </target>
  <target name="publish-core" unless="skip.gs" >
    <foreach list="${gs.exts_core}" param="name" target="publish-extension" />
  </target>
  <target name="publish-community" unless="skip.gs" >
    <foreach list="${gs.exts_comm}" param="name" target="publish-extension" />
  </target>

  <target name="unpack-core-ext">
    <property name="extdir" value="${gs-core.ext.dir}"/>
    <delete dir="target/${ext}"/>
    <mkdir dir="target/${ext}"/>
    <unzip src="${extdir}/geoserver-${gs.version}-${ext}-plugin.zip"
        dest="target/${ext}">
      <!-- exclude non-jar files and any jars that are already provided by the core webapp -->
      <patternset>
        <exclude name="*.txt"/>
        <exclude name="*.TXT"/>
        <exclude name="*.ini"/>
        <exclude name="commons-pool-*.jar"/>
        <exclude name="gt-app-schema-resolver-*.jar"/>
        <exclude name="gt-complex-*.jar"/>
        <exclude name="gt-geojson-*.jar"/>
        <exclude name="gt-geopkg-??-SNAPSHOT.jar"/>
        <exclude name="gt-jdbc-h2-*.jar"/>
        <exclude name="gt-process-??-SNAPSHOT.jar"/>
        <exclude name="gt-process-feature-*.jar"/>
        <exclude name="gt-process-geometry-*.jar"/>
        <exclude name="gt-process-raster-*.jar"/>
        <exclude name="gt-xsd-kml-*.jar"/>
        <exclude name="httpclient-*.jar"/>
        <exclude name="httpcore-*.jar"/>
        <exclude name="imageio-ext-geocore-*.jar"/>
        <exclude name="imageio-ext-imagereadmt-*.jar"/>
        <exclude name="jackson-annotations-*.jar"/>
        <exclude name="jackson-core-*.jar"/>
        <exclude name="jackson-databind-*.jar"/>
        <exclude name="joda-time-*.jar"/>
        <exclude name="json-simple-*.jar"/>
        <exclude name="sqlite-jdbc-*.jar"/>
      </patternset>
    </unzip>
  </target>

  <target name="unpack-comm-ext">
    <antcall target="unpack-core-ext">
      <param name="ext" value="${ext}"/>
      <param name="extdir" value="${gs-comm.ext.dir}"/>
    </antcall>
  </target>

</project>
