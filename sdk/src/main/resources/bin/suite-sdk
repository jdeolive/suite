#!/bin/bash

ant -version &> /dev/null
if [ $? -ne 0 ]; then
    echo 'Requires Apache Ant (see http://ant.apache.org/)'
    exit 1
fi

NAME=$(basename -- "$0")

## General usage
HELP_USAGE="
Usage: $NAME <command> <args>

List of commands:
    create      Create a new application.
    debug       Run an existing application in debug mode.
    package     Create a WAR file.
    
See '$NAME <command> --help' for more detail on a specific command.
"

## Usage for create command
CREATE_USAGE="
Usage: $NAME create <app-path> <app-template>

Create a new application.  A new directory will be created using the <app-path> 
argument (it must not already exist). Possible values for <app-template> are:

    gxp        a template based on GXP, GeoExt and OpenLayers 2
    ol3view    a template based on OpenLayers 3 and bootstrap for viewing
    ol3edit    a template based on OpenLayers 3 and bootstrap for editing
"

## Usage for debug command
DEBUG_USAGE="
Usage: $NAME debug [<options>] <app-path>

Debug an existing application.  The <app-path> argument must be the path to an
existing application.

List of options:

    -l | --local-port   port    Port for the local debug server.  Default is 
                                9080.

    -g | --geoserver    url     URL for a remote GeoServer to proxy.  The debug
                                server will make the remote GeoServer available
                                from the '/geoserver' path within the 
                                application.
"

## Usage for package command
PACKAGE_USAGE="
Usage: $NAME package <app-path> <build-path>

Package an existing application.  The <app-path> argument must be the path to an
existing application. The <build-path> is the location where the WAR file package
will be created.

"

# find sdk home
if [ -z "$0" ]; then
    # as a last recourse, use the present working directory
    SDK_HOME=$(pwd)
else
    # save original working directory
    ORIG_PWD="$(pwd -P)"

    # get the absolute path of the executable
    SELF_PATH=$(
        cd -P -- "$(dirname -- "$0")" \
        && pwd -P
    ) && SELF_PATH=$SELF_PATH/$(basename -- "$0")

    # resolve symlinks
    while [ -h "$SELF_PATH" ]; do
        DIR=$(dirname -- "$SELF_PATH")
        SYM=$(readlink -- "$SELF_PATH")
        SELF_PATH=$(cd -- "$DIR" && cd -- $(dirname -- "$SYM") && pwd)/$(basename -- "$SYM")
    done

    SDK_HOME=$(dirname -- "$(dirname -- "$SELF_PATH")")

    # restore original working directory
    cd "$ORIG_PWD"

fi

COMMAND=help
if [ $# -gt 0 ]; then
    COMMAND=$1
    shift
    case $COMMAND in 
        -h|--help) COMMAND=help;;
        --version) COMMAND=version;;
    esac
fi

case $COMMAND in
    create|debug|package|version)
        # PASS
        ;;
    *)
        echo "$HELP_USAGE"
        exit 1
        ;;
esac

# parse options and assemble ant args
ANT_ARGS=""
HELP=false
LOCAL_PORT=9080 # default repeated in build.xml, but used here for success message
until [ -z "$1" ]; do
    case $1 in
        -g|--geoserver)
            shift; GEOSERVER_URL=$1; shift
            ANT_ARGS="$ANT_ARGS -Dapp.proxy.geoserver=$GEOSERVER_URL"
            ;;
        -l|--local-port)
            shift; LOCAL_PORT=$1; shift
            ANT_ARGS="$ANT_ARGS -Dapp.port=$LOCAL_PORT"
            ;;
        -h|--help)
            shift
            HELP=true
            ;;
        -*)
            echo "$HELP_USAGE"
            exit 1
            ;;
        *)
            break;;
    esac
done

case $COMMAND in 
    create )
        if $HELP ; then
            echo "$CREATE_USAGE"
            exit 0
        fi
        APP_PATH=$1
        if [ $# -ne 2 -o -z "$APP_PATH" ]; then
            echo "$CREATE_USAGE"
            exit 1
        fi
        if [ -d "$APP_PATH" ]; then
            echo "Directory '$APP_PATH' already exists.  Supply the path for a new directory."
            exit 1
        fi
        APP_TEMPLATE=$2
        if [ $# -ne 2 -o -z "$APP_TEMPLATE" ]; then
            echo "$CREATE_USAGE"
            exit 1
        fi
        ANT_ARGS="$ANT_ARGS -Dapp.path=\"$APP_PATH\" -Dapp.template=\"$APP_TEMPLATE\""
        ;;
    debug )
        if $HELP ; then
            echo "$DEBUG_USAGE"
            exit 0
        fi
        APP_PATH=$1
        if [ $# -ne 1 -o -z "$APP_PATH" ]; then
            echo "$DEBUG_USAGE"
            exit 1
        fi
        if [ ! -d "$APP_PATH" ]; then
            echo "Directory '$APP_PATH' doesn't exist.  Supply the path for an existing app directory."
            exit 1
        fi
        ANT_ARGS="$ANT_ARGS -Dapp.path=\"$APP_PATH\""
        ;;
    package )
        if $HELP ; then
            echo "$PACKAGE_USAGE"
            exit 0
        fi
        APP_PATH=$1
        if [ $# -lt 1 -o $# -gt 2 -o -z "$APP_PATH" ]; then
            echo "$PACKAGE_USAGE"
            exit 1
        fi
        if [ ! -d "$APP_PATH" ]; then
            echo "Directory '$APP_PATH' doesn't exist.  Supply the path for an existing app directory."
            exit 1
        fi
        if [ $# -eq 1 ]; then
            WAR_PATH=$(pwd)
        else
            WAR_PATH=$2
        fi
        if [ -z "$WAR_PATH" ]; then
            echo "$PACKAGE_USAGE"
            exit 1
        fi
        ANT_ARGS="$ANT_ARGS -Dapp.path=\"$APP_PATH\" -Dapp.warpath=\"$WAR_PATH\""
        ;;
esac

# create log file (in case it doesn't already exist)
LOG_FILE=/tmp/suite-sdk/suite-sdk.log
LOG_DIR=$(dirname -- "$LOG_FILE")

mkdir -p "$LOG_DIR" &> /dev/null
rm "$LOG_FILE" &> /dev/null
touch "$LOG_FILE" &> /dev/null

if [ $? -ne 0 ]; then
    LOG_FILE=/dev/null
fi

CREATE_START="
Creating application ..."

CREATE_FAILURE="
The '$NAME create' command failed.

A common cause of this is the failure to create the provided directory:
'$APP_PATH'. Please ensure that the directory name is valid and that you
have permission to create this directory.

Another common cause is that the <app-template> value is invalid
(should be one of: gxp, ol3view or ol3edit). Option specified was: 
'$APP_TEMPLATE'

Please run '$NAME create --help' for help on the usage."

DEBUG_START="
Starting debug server for application (use CTRL+C to stop)"

DEBUG_STOP="
Debug server stopped.
"

DEBUG_FAILURE="
The '$NAME debug' command failed.

Two commmon causes of this are:
* The <app-path> provided did not contain a valid SDK application: $APP_PATH
* There was a conflict with the provided local port (-l): $LOCAL_PORT

Please run '$NAME debug --help' for help on the usage.
"

PACKAGE_START="
Packaging application ..."

PACKAGE_FAILURE="
The '$NAME package' command failed.

Two commmon causes of this are:
* The ^<app-path^> directory does not contain a valid application: $APP_PATH
* The ^<build-path^> directory must be valid and writeable: $WAR_PATH

Please run '$NAME package --help' for help on the usage."

# provide feedback that work is starting
case $COMMAND in
    create) echo "$CREATE_START";;
    debug) echo "$DEBUG_START";;
    package) echo "$PACKAGE_START";;
esac

# run the command via ant
ant -e -f "$SDK_HOME/build.xml" -Dsdk.logfile="$LOG_FILE" -Dsdk.home="$SDK_HOME" -Dbasedir=. $COMMAND $ANT_ARGS 2>> "$LOG_FILE"
STATUS=$?

# handle results
if [ $STATUS -ne 0 ]; then
    case $COMMAND in 
        create) 
            echo "$CREATE_FAILURE";;
        debug)
            if [ $STATUS -eq 130 ]; then
                echo "$DEBUG_STOP"
                exit
            else
                echo "$DEBUG_FAILURE"
            fi
            ;;
        package) echo "$PACKAGE_FAILURE";;
    esac
    echo "See the logfile '$LOG_FILE' for more detail on what went wrong."
    echo
    exit 1
fi

